#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('sportscave:server');
const http = require('http').Server(app);
const io = require('socket.io')(http);
const passport = require('passport');

const mongoose = require('mongoose');
const ChatUser = mongoose.model('ChatUser');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.listen(port, () => {
  console.log('server is running on port', server.address().port);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

mongoose.connect('mongodb://dbuser:password1@ds211724.mlab.com:11724/sportscavechat', { useNewUrlParser: true}).catch(function (reason) {
    console.log('Unable to connect to the mongodb instance. Error: ', reason);
});
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', ()=>{
    
    console.log('MongoDB connected....');

    io.on('connection', (socket) =>{
        sendStatus = (s) =>{
            socket.emit('status',s);
        };

        ChatUser.find().limit(50).sort({__id:1}).then((res) =>
        {
            socket.emit('output', res);
        }).catch(function(error){
            console.log('Error getting the posts');
        });


        socket.on('input', (data) =>{
            let name = data.username;
            let message = data.message;
            console.log('recieved data'+data);
            if(name == '' || message == ''){
                sendStatus('Please enter a name and message');
            } else{
                let chatUser = new ChatUser({name: name, message: message});
                console.log('chat user'+chatUser.name, chatUser.message);
                chatUser.save((err, chatUser) =>{
                    if(err){
                        throw err;
                    }
                    console.log('chat save'+chatUser.name);
                    io.emit('output', {username:chatUser.name, message: chatUser.message});

                    sendStatus({
                        message: 'Message sent',
                        clear: true
                    });
                });
            }

        });

        socket.on('clear', (data) =>{

            ChatUser.deleteMany({}, (err) =>{
                if(err){
                    throw err;
                }
    
                socket.emit('cleared');
            });
        });
    });
});