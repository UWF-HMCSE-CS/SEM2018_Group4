#!/usr/bin/env node

/**
 * Module dependencies.
 */

const express = require('express');
const app = express();
const debug = require('debug')('sportscave:server');
const http = require('http').Server(app);
const config = require('../config/config.js');

process.env.NODE_ENV = 'development';

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(global.gConfig.node_port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.listen(port, () => {
  console.log('server is running on port', server.address().port);
});

/**
 * Listen on provided port, on all network interfaces.
 */
require('../app.js')(app, server, express);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// mongoose.connect(global.gConfig.database, { useNewUrlParser: true}).catch(function (reason) {
//     console.log('Unable to connect to the mongodb instance. Error: ', reason);
// });
// var db = mongoose.connection;
// db.on('error', console.error.bind(console, 'connection error:'));
// db.once('open', ()=>{
    
//     console.log('MongoDB connected....');
//     io.attach(server);
// });